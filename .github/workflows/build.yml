# This is a basic workflow to help you get started with Actions

name: Build Images

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
env:
  IMAGE_OS: "bookworm"
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build_core_python:
    strategy:
      matrix:
        python_version: ["3.10", "3.11", "3.12"]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        platforms: linux/amd64,linux/arm64
        push: true
        file: python/Dockerfile.python
        tags: corpheus91/devcontainers:python-${{matrix.python_version}}-${{env.IMAGE_OS}}
        build-args: |
          VERSION=${{matrix.python_version}}
          BASE=${{env.IMAGE_OS}}
  
  build_core_node:
    strategy:
      matrix:
        node_version: ["21", "20"]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        platforms: linux/amd64,linux/arm64
        push: true
        file: node/Dockerfile.node
        tags: corpheus91/devcontainers:node-${{matrix.node_version}}-${{env.IMAGE_OS}}
        build-args: |
          VERSION=${{matrix.node_version}}
          BASE=${{env.IMAGE_OS}}

  build_core_golang:
    strategy:
      matrix:
        golang_version: ["1.22", "1.21", "1.20"]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        platforms: linux/amd64,linux/arm64
        push: true
        file: golang/Dockerfile.golang
        tags: corpheus91/devcontainers:golang-${{matrix.golang_version}}-${{env.IMAGE_OS}}
        build-args: |
          VERSION=${{matrix.golang_version}}
          BASE=${{env.IMAGE_OS}}

  build_core_java:
    strategy:
      matrix:
        java_version: ["21.0.2"]
    runs-on: ubuntu-latest
    env:
      JAVA_VARIANT: open
    steps:
    - uses: actions/checkout@master
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        platforms: linux/amd64,linux/arm64
        push: true
        file: java/Dockerfile.java
        tags: corpheus91/devcontainers:java-${{matrix.java_version}}-${{env.IMAGE_OS}}
        build-args: |
          VERSION=${{matrix.java_version}}
          BASE=${{env.IMAGE_OS}}
          JAVA_VARIANT=${{env.JAVA_VARIANT}}

  build_core_rust:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        platforms: linux/amd64,linux/arm64
        push: true
        file: rust/Dockerfile.rust
        tags: corpheus91/devcontainers:rust-${{env.IMAGE_OS}}
        build-args: |
          VERSION=""
          BASE=${{env.IMAGE_OS}}

  build_core_php:
    strategy:
      matrix:
        php_version: ["8.2", "8.3"]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        platforms: linux/amd64,linux/arm64
        push: true
        file: php/Dockerfile.php
        tags: corpheus91/devcontainers:php-${{matrix.php_version}}-${{env.IMAGE_OS}}
        build-args: |
          VERSION=${{matrix.php_version}}
          BASE=${{env.IMAGE_OS}}

  build_variant_kubernetes:
    strategy:
      matrix:
        language_and_version: [
          "golang-1.20",
          "golang-1.21",
          "golang-1.22",
          "java-21.0.2",
          "node-20",
          "node-21",
          "php-8.2",
          "php-8.3",
          "python-3.10", 
          "python-3.11", 
          "python-3.12",
          "rust"
        ]
    env:
      REGISTRY: corpheus91/devcontainers
    runs-on: ubuntu-latest
    needs: [
      build_core_golang,
      build_core_java,
      build_core_node,
      build_core_php,
      build_core_python,
      build_core_rust
    ]
    steps:
      - uses: actions/checkout@master
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          file: kubernetes/Dockerfile.kubernetes
          tags: corpheus91/devcontainers:${{matrix.language_and_version}}-kubernetes
          build-args: |
            IMAGE=${{env.REGISTRY}}:${{matrix.language_and_version}}-${{env.IMAGE_OS}}
